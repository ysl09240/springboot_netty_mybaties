<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.shxseer.watch.dao.CommandMapper">

    <!-- 根据药品id查询药品 -->
    <select id="findDrugStore" parameterType="java.lang.String" resultType="com.shxseer.watch.vo.DrugStoreVo">
      SELECT
          d.id,
          d.category_id as categoryId,
          (select  dc.category_name from drug_category dc  where dc.id=d.category_id ) as categoryName,
          d.drug_name as drugName,
          d.specification,
          d.usagedosage,
          d.adaptation,
          d.taboo,
          d.halflife_small as halflifeSmall,
          d.halflife_big as halflifeBig,
          d.halflife_content as halflifeContent,
          d.disadaptation,
          d.create_time as createTime,
          d.create_by as createBy
       FROM drugstore d
       where d.id=#{id}
    </select>

    <!-- 波形上传 -->
    <insert id="waveSave" parameterType="com.shxseer.watch.model.WaveDataUpBean">
      INSERT INTO wave_origin_data(
        id,
        imei,
        sleepy,
        lrhand,
        filesize,
        datanum,
        starttime,
        uploadtime,
        istestbpbs,
        sportstatus,
        file_url
      )
      VALUES (
        #{id},
        #{imei},
        #{sleepy},
        #{lrhand},
        #{filesize},
        #{datanum},
        #{starttime},
        #{uploadtime},
        #{istestbpbs},
        #{sportstatus},
        #{fileUrl}
      )
    </insert>

    <!-- 久坐提醒上传 -->
    <insert id="sedentarySave" parameterType="com.shxseer.watch.model.SedentaryBean">
        INSERT INTO sedentary (
          id,
          imei,
          sittime,
          sitduration)
        VALUES (
        #{id},
        #{imei},
        #{sittime},
        #{sitduration}
        )
    </insert>

    <!-- 计步上传 -->
    <insert id="stepCountSave" parameterType="com.shxseer.watch.model.StepBean">
        INSERT INTO step_data (
        id,
        imei,
        stepcount,
        uploadtime
        ) VALUES (
        #{id},
        #{imei},
        #{stepcount},
        #{uploadtime}
        )
    </insert>

    <!-- 血糖血压基准值查询 -->
    <select id="bloodBaseSearch" parameterType="com.shxseer.watch.model.BloodBaselineBean" resultType="java.util.HashMap">
        SELECT a.user_id ,
            MAX(CASE a.blood_type WHEN 3 THEN a.datum_value  END)  bloodValue,
            MAX(CASE a.blood_type WHEN 14 THEN a.datum_value END)  pressValue
        FROM blood_datum_value a
        LEFT JOIN watch_user_record b ON a.user_id = b.user_id
        LEFT JOIN watch_information c ON b.watch_id = c.id
        WHERE c.imei = #{imei}
        GROUP BY a.user_id
        LIMIT 1
    </select>
    <!-- 公共参数查询 -->
    <select id="findCommonParams" parameterType="java.lang.String" resultType="com.shxseer.watch.model.CommonParamsBean">
          SELECT
            MAX(CASE common_name WHEN 'serverurl' THEN common_value END ) AS serverurl,
            MAX(CASE common_name WHEN 'interval' THEN common_value END ) AS 'interval',
            MAX(CASE common_name WHEN 'testtime' THEN common_value END ) AS testtime
          FROM common_data WHERE common_type='ALL'
          GROUP BY common_type
    </select>

    <!-- 计步上传 -->
    <insert id="heartRateDataSave" parameterType="com.shxseer.watch.model.HeartRateDataBean">
        insert into heart_rate (
          id,
          imei,
          heart,
          uploadtime,
          create_time,
          create_by
        ) 
        values
          (
            #{id},
            #{imei},
            #{heart},
            #{uploadtime},
            #{createTime},
            #{createBy}
          )
    </insert>

    <!-- 根据设备号查询用户对应关系 -->
    <select id="findWatchUserRecordByImei" parameterType="com.shxseer.watch.model.HeartBeatBean" resultType="com.shxseer.watch.model.WatchUserRecordBean">
          SELECT 
              wur.id,
              wur.watch_id as watchId,
              wur.user_id as userId,
              wur.update_time as updateTime,
              wur.create_by as createBy,
              wur.action_type as actionType,
              wur.create_time as createTime
          FROM
            watch_user_record wur
          left join watch_information wi on wur.watch_id = wi.id
          WHERE wi.imei=#{imei}
          LIMIT 0, 1;

    </select>

    <!-- 根据imei号获取原始数据主键id集合 -->
    <select id="getWaveIdByimei" parameterType="string" resultType="string">
        select id from wave_origin_data where imei = #{imei}
    </select>

    <!-- 根据主键id查询原始数据对象 -->
    <select id="getWaveDataUpBeanById" parameterType="string" resultType="com.shxseer.watch.model.WaveDataUpBean">
        SELECT
            id,
            imei,
            sleepy,
            lrhand,
            filesize,
            datanum,
            starttime,
            uploadtime,
            istestbpbs,
            sportstatus,
            data
        FROM wave_origin_data
        where id = #{waveId}
    </select>

    <!-- 根据本次测量时间和设备号查询当前用户的上一组数据的主键id -->
    <select id="getBeforeWaveIdByStarttime" parameterType="java.util.Map" resultType="string">
        SELECT id FROM wave_origin_data WHERE starttime = (
        SELECT starttime FROM wave_origin_data WHERE starttime &lt; #{startTime} AND imei = #{imei} ORDER BY starttime DESC LIMIT 1
        ) AND imei = #{imei}
    </select>


</mapper>